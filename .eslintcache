[{"/home/orlandoneto/dev/js/netflix-clone/src/App.js":"1","/home/orlandoneto/dev/js/netflix-clone/src/Tmdb.js":"2","/home/orlandoneto/dev/js/netflix-clone/src/index.js":"3","/home/orlandoneto/dev/js/netflix-clone/src/components/MovieRow.js":"4","/home/orlandoneto/dev/js/netflix-clone/src/components/FeaturedMovie.js":"5"},{"size":1404,"mtime":1607960633072,"results":"6","hashOfConfig":"7"},{"size":2222,"mtime":1607961156174,"results":"8","hashOfConfig":"7"},{"size":197,"mtime":1607866616814,"results":"9","hashOfConfig":"7"},{"size":771,"mtime":1607957581632,"results":"10","hashOfConfig":"7"},{"size":178,"mtime":1607959274084,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"x6b87y",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/orlandoneto/dev/js/netflix-clone/src/App.js",["24","25"],"import React, { useEffect, useState } from 'react'\n\nimport './App.css'\nimport FeaturedMovie from './components/FeaturedMovie'\nimport MovieRow from './components/MovieRow'\nimport Tmdb from './Tmdb'\n\nexport default () => {\n    const [movieList, setMovieList] = useState([])\n    const [featuredData, setFeaturedData] = useState(null)\n\n    useEffect(() => {\n        const loadAll = async () => {\n            // Carregando toda a lista de movies\n            let list = await Tmdb.getHomeList()\n            setMovieList(list)\n            console.log(list)\n\n            // Pegando somente a row com slug === originals\n            let originals = list.filter(i => i.slug === 'originals')\n            let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length))\n            let chosen = originals[0].items.results[randomChosen]\n            console.log('originals Random', chosen)\n        }\n\n        loadAll()\n    }, [])\n\n    return (\n        <div className=\"page\" >\n            { featuredData &&\n                <FeaturedMovie item={featuredData} />\n            }\n\n            <section className=\"lists\">\n                {movieList.map((item, key) => (\n                    <MovieRow\n                        key={key}\n                        title={item.title}\n                        items={item.items}\n                    />\n                ))}\n            </section>\n        </div>\n    )\n}","/home/orlandoneto/dev/js/netflix-clone/src/Tmdb.js",["26","27"],"const API_KEY = 'e2917b918d72f580babe40b7497ee38f'\nconst API_BASE = 'https://api.themoviedb.org/3'\n\n/**\n *  - originais da netflix\n *  - recomendados (trending)\n *  - em alta (top rated)\n *  - ação\n *  - comédia\n *  - terror\n *  - romance\n *  - documentário\n */\n\nconst baseFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`)\n    const json = await req.json()\n    return json\n}\n\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                items: await baseFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para Você',\n                items: await baseFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                items: await baseFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await baseFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            }\n            ,\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await baseFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await baseFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await baseFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                items: await baseFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n            }\n        ]\n    },\n    getMovieInfo: async (movieId, type) => {\n        let info = {}\n    }\n}","/home/orlandoneto/dev/js/netflix-clone/src/index.js",[],"/home/orlandoneto/dev/js/netflix-clone/src/components/MovieRow.js",[],"/home/orlandoneto/dev/js/netflix-clone/src/components/FeaturedMovie.js",[],{"ruleId":"28","severity":1,"message":"29","line":8,"column":1,"nodeType":"30","endLine":46,"endColumn":2},{"ruleId":"31","severity":1,"message":"32","line":10,"column":26,"nodeType":"33","messageId":"34","endLine":10,"endColumn":41},{"ruleId":"28","severity":1,"message":"35","line":21,"column":1,"nodeType":"30","endLine":70,"endColumn":2},{"ruleId":"31","severity":1,"message":"36","line":68,"column":13,"nodeType":"33","messageId":"34","endLine":68,"endColumn":17},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'setFeaturedData' is assigned a value but never used.","Identifier","unusedVar","Assign object to a variable before exporting as module default","'info' is assigned a value but never used."]